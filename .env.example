# .env.example
# OpenAI API設定
OPENAI_API_KEY=your_openai_api_key_here

# データベース設定
DATABASE_URL=postgresql://postgres:postgres@db:5432/research_lab_finder
POSTGRES_DB=research_lab_finder
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# アプリケーション設定
ENVIRONMENT=development
DEBUG=true

# フロントエンド設定
VITE_API_BASE_URL=http://localhost:8000

# === プロジェクト用の .gitignore ===
# .gitignore

# 環境変数
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# 依存関係
node_modules/
__pycache__/
*.py[cod]
*$py.class

# ビルド成果物
/backend/dist/
/frontend/dist/
/frontend/build/
*.egg-info/
.pytest_cache/

# IDE設定
.vscode/
.idea/
*.swp
*.swo
*~

# OS生成ファイル
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db

# ログファイル
*.log
logs/

# データベース
*.db
*.sqlite3
*.sqlite

# テスト
coverage/
.nyc_output/
.coverage

# Docker
.docker/

# 一時ファイル
tmp/
temp/

# === セットアップスクリプト ===
# scripts/setup.sh
#!/bin/bash

set -e

echo "🚀 研究室ファインダー - セットアップ開始"

# カラーコード
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# 必要なツールの確認
check_requirements() {
    echo -e "${BLUE}📋 必要なツールの確認中...${NC}"
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}❌ Dockerがインストールされていません${NC}"
        echo "https://docs.docker.com/get-docker/ からDockerをインストールしてください"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        echo -e "${RED}❌ Docker Composeがインストールされていません${NC}"
        echo "https://docs.docker.com/compose/install/ からDocker Composeをインストールしてください"
        exit 1
    fi
    
    echo -e "${GREEN}✅ 必要なツールが揃っています${NC}"
}

# 環境変数ファイルの確認・作成
setup_env() {
    echo -e "${BLUE}🔧 環境変数の設定中...${NC}"
    
    if [ ! -f .env ]; then
        echo -e "${YELLOW}⚠️ .envファイルが見つかりません。.env.exampleからコピーしています...${NC}"
        cp .env.example .env
        echo -e "${YELLOW}📝 .envファイルを編集してOpenAI APIキーを設定してください${NC}"
        echo -e "${YELLOW}   OPENAI_API_KEY=your_actual_api_key_here${NC}"
        
        # OpenAI APIキーの入力を促す
        read -p "今すぐOpenAI APIキーを入力しますか？ (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            read -p "OpenAI APIキーを入力してください: " api_key
            if [ ! -z "$api_key" ]; then
                sed -i.bak "s/your_openai_api_key_here/$api_key/" .env
                echo -e "${GREEN}✅ OpenAI APIキーが設定されました${NC}"
            fi
        fi
    else
        echo -e "${GREEN}✅ .envファイルが存在します${NC}"
    fi
}

# Docker環境の構築
build_docker() {
    echo -e "${BLUE}🐳 Docker環境の構築中...${NC}"
    
    # 既存のコンテナを停止・削除
    echo "既存のコンテナを停止中..."
    docker-compose down -v 2>/dev/null || true
    
    # Dockerイメージのビルド
    echo "Dockerイメージをビルド中..."
    docker-compose build --no-cache
    
    echo -e "${GREEN}✅ Docker環境の構築完了${NC}"
}

# データベースの初期化
init_database() {
    echo -e "${BLUE}📊 データベースの初期化中...${NC}"
    
    # データベースコンテナの起動
    echo "データベースコンテナを起動中..."
    docker-compose up -d db
    
    # データベースの起動待機
    echo "データベースの起動を待機中..."
    sleep 10
    
    # 接続テスト
    max_attempts=30
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if docker-compose exec -T db pg_isready -U postgres > /dev/null 2>&1; then
            echo -e "${GREEN}✅ データベースに接続できました${NC}"
            break
        fi
        echo "データベース接続試行 $attempt/$max_attempts..."
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        echo -e "${RED}❌ データベースへの接続がタイムアウトしました${NC}"
        exit 1
    fi
}

# アプリケーションの起動
start_application() {
    echo -e "${BLUE}🚀 アプリケーションの起動中...${NC}"
    
    # 全サービスの起動
    docker-compose up -d
    
    # サービスの起動確認
    echo "サービスの起動確認中..."
    sleep 15
    
    # バックエンドAPIの確認
    max_attempts=20
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:8000/health > /dev/null 2>&1; then
            echo -e "${GREEN}✅ バックエンドAPIが起動しました${NC}"
            break
        fi
        echo "バックエンドAPI起動確認 $attempt/$max_attempts..."
        sleep 3
        attempt=$((attempt + 1))
    done
    
    # フロントエンドの確認
    attempt=1
    while [ $attempt -le $max_attempts ]; do
        if curl -f http://localhost:3000 > /dev/null 2>&1; then
            echo -e "${GREEN}✅ フロントエンドが起動しました${NC}"
            break
        fi
        echo "フロントエンド起動確認 $attempt/$max_attempts..."
        sleep 3
        attempt=$((attempt + 1))
    done
}

# 成功メッセージの表示
show_success() {
    echo -e "${GREEN}"
    echo "🎉 セットアップ完了！"
    echo "==============================================="
    echo "🌐 フロントエンド: http://localhost:3000"
    echo "🔧 バックエンドAPI: http://localhost:8000"
    echo "📊 API文書: http://localhost:8000/docs"
    echo "🗄️ データベース管理: http://localhost:8080"
    echo "==============================================="
    echo ""
    echo "📝 使用方法:"
    echo "  • ブラウザで http://localhost:3000 にアクセス"
    echo "  • 興味のある分野を自由に入力して検索"
    echo "  • AI推奨システムが関連研究室を表示"
    echo ""
    echo "🛠️ 管理コマンド:"
    echo "  • 停止: docker-compose down"
    echo "  • 再起動: docker-compose restart"
    echo "  • ログ確認: docker-compose logs -f"
    echo "${NC}"
}

# エラーハンドリング
error_handler() {
    echo -e "${RED}❌ セットアップ中にエラーが発生しました${NC}"
    echo "ログを確認してください: docker-compose logs"
    exit 1
}

trap error_handler ERR

# メイン実行
main() {
    echo -e "${BLUE}研究室ファインダー 自動セットアップスクリプト${NC}"
    echo "============================================="
    
    check_requirements
    setup_env
    build_docker
    init_database
    start_application
    show_success
}

# スクリプト実行
main "$@"

# === 開発用スクリプト ===
# scripts/run_dev.sh
#!/bin/bash

set -e

echo "🔧 開発モード起動中..."

# 環境変数の確認
if [ ! -f .env ]; then
    echo "❌ .envファイルが見つかりません"
    echo "scripts/setup.sh を先に実行してください"
    exit 1
fi

# 開発サーバーの起動
echo "🚀 開発サーバーを起動中..."
docker-compose up --build

# === ビルドスクリプト ===
# scripts/build.sh
#!/bin/bash

set -e

echo "🏗️ プロダクションビルド開始..."

# フロントエンドのビルド
echo "📦 フロントエンドをビルド中..."
cd frontend
npm run build
cd ..

# バックエンドのテスト
echo "🧪 バックエンドテスト実行中..."
docker-compose -f docker-compose.yml -f docker-compose.test.yml run --rm backend pytest

echo "✅ ビルド完了"

# === データリセットスクリプト ===
# scripts/reset_data.sh
#!/bin/bash

set -e

echo "🗑️ データベースリセット中..."

# コンテナ停止
docker-compose down -v

# ボリュームの削除
docker volume rm research_lab_finder_postgres_data 2>/dev/null || true

# 再起動
docker-compose up -d db

echo "✅ データベースがリセットされました"
echo "バックエンドを再起動してください: docker-compose restart backend"