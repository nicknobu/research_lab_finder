#!/bin/bash

# VSCode „Ç®„É©„Éº‰øÆÊ≠£„Çπ„ÇØ„É™„Éó„Éà
echo "üîß VSCode „Ç®„É©„Éº„Çí‰øÆÊ≠£‰∏≠..."

# 1. LabCard.tsx „ÅåÂ≠òÂú®„Åó„Å™„ÅÑÂ†¥Âêà„ÅØ‰ΩúÊàê
if [ ! -f "frontend/src/components/LabCard.tsx" ]; then
    echo "üìù LabCard.tsx „Çí‰ΩúÊàê‰∏≠..."
    cat > frontend/src/components/LabCard.tsx << 'EOF'
import React from 'react';
import { MapPin, User, ExternalLink } from 'lucide-react';
import type { ResearchLabSearchResult } from '../types';

interface LabCardProps {
  lab: ResearchLabSearchResult;
  onClick?: (lab: ResearchLabSearchResult) => void;
}

const LabCard: React.FC<LabCardProps> = ({ lab, onClick }) => {
  return (
    <div 
      className="border border-gray-200 rounded-lg p-6 hover:shadow-md transition-shadow cursor-pointer"
      onClick={() => onClick?.(lab)}
    >
      <div className="flex justify-between items-start mb-3">
        <h3 className="text-xl font-semibold text-gray-900">{lab.name}</h3>
        <span className="bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm font-medium">
          {Math.round((lab.similarity_score || 0) * 100)}% „Éû„ÉÉ„ÉÅ
        </span>
      </div>
      
      <div className="mb-3">
        <p className="text-gray-700 flex items-center">
          <User className="h-4 w-4 mr-1" />
          {lab.professor_name}
        </p>
        <p className="text-gray-700 flex items-center mt-1">
          <MapPin className="h-4 w-4 mr-1" />
          {lab.university_name}, {lab.region}
        </p>
      </div>
      
      <div className="mb-3">
        <h4 className="font-semibold text-gray-800 mb-1">Á†îÁ©∂„ÉÜ„Éº„Éû:</h4>
        <p className="text-gray-700">{lab.research_theme}</p>
      </div>
      
      <div className="flex items-center justify-between">
        <span className="bg-gray-100 text-gray-700 px-3 py-1 rounded-full text-sm">
          {lab.research_field}
        </span>
        {lab.lab_url && (
          <ExternalLink className="h-4 w-4 text-blue-600" />
        )}
      </div>
    </div>
  );
};

export default LabCard;
EOF
    echo "‚úÖ LabCard.tsx „Çí‰ΩúÊàê„Åó„Åæ„Åó„Åü"
fi

# 2. LabDetail.tsx „ÅÆ getSimilarLabs Âëº„Å≥Âá∫„Åó„Çí‰øÆÊ≠£ (2ÂÄã„ÅÆÂºïÊï∞‚Üí1ÂÄã„ÅÆÂºïÊï∞)
echo "üîß LabDetail.tsx „ÅÆ getSimilarLabs Âëº„Å≥Âá∫„Åó„Çí‰øÆÊ≠£‰∏≠..."
sed -i 's/getSimilarLabs(labId, 5)/getSimilarLabs(labId)/g' frontend/src/pages/LabDetail.tsx

# 3. api.ts „ÅÆ import.meta.env „Ç®„É©„Éº„Çí‰øÆÊ≠£
echo "üîß api.ts „ÅÆ import.meta.env „Ç®„É©„Éº„Çí‰øÆÊ≠£‰∏≠..."
sed -i 's/import\.meta\.env\.VITE_API_BASE_URL/(import.meta as any)?.env?.VITE_API_BASE_URL/g' frontend/src/utils/api.ts

# 4. tsconfig.json „Å´ ViteÂûã„ÇíËøΩÂä†
echo "üìù tsconfig.json „Å´ ViteÂûã„ÇíËøΩÂä†‰∏≠..."
if ! grep -q '"vite/client"' frontend/tsconfig.json; then
    sed -i 's/"types": \[/"types": ["vite\/client",/' frontend/tsconfig.json
fi

# 5. database.py „ÅÆÂûã„Ç®„É©„Éº„Çí‰øÆÊ≠£
echo "üîß database.py „ÅÆÂûã„Ç®„É©„Éº„Çí‰øÆÊ≠£‰∏≠..."
sed -i 's/def get_db() -> Session:/def get_db() -> Generator[Session, None, None]:/' backend/app/database.py
if ! grep -q "from typing import Generator" backend/app/database.py; then
    sed -i '1i from typing import Generator' backend/app/database.py
fi

# 6. Êú™‰ΩøÁî®„Ç§„É≥„Éù„Éº„Éà„ÇíÂâäÈô§ (SearchResults.tsx)
echo "üßπ Êú™‰ΩøÁî®„Ç§„É≥„Éù„Éº„Éà„ÇíÂâäÈô§‰∏≠..."
sed -i 's/, SortAsc//' frontend/src/pages/SearchResults.tsx

# 7. App.tsx „ÅÆReact„Ç§„É≥„Éù„Éº„Éà„ÇíÂâäÈô§ (React 17+„Åß„ÅØ‰∏çË¶Å)
sed -i '/^import React from/d' frontend/src/App.tsx

# 8. Êú™‰ΩøÁî®Â§âÊï∞„ÇíÂâäÈô§ (Header.tsx, Home.tsx)
echo "üßπ Êú™‰ΩøÁî®Â§âÊï∞„ÇíÂâäÈô§‰∏≠..."
# Header.tsx „ÅÆÊú™‰ΩøÁî®„ÅÆ location Â§âÊï∞„ÇíÂâäÈô§
sed -i '/const location = useLocation()/d' frontend/src/components/Header.tsx
# Home.tsx „ÅÆÊú™‰ΩøÁî®„ÅÆ navigate Â§âÊï∞„ÇíÂâäÈô§  
sed -i '/const navigate = useNavigate()/d' frontend/src/pages/Home.tsx

# 9. Footer.tsx „ÅÆÊú™‰ΩøÁî®„Ç§„É≥„Éù„Éº„Éà„ÇíÂâäÈô§
sed -i '/^import.*lucide-react.*$/d' frontend/src/components/Footer.tsx

# 10. Dockerfile „ÅÆNode.js„Éê„Éº„Ç∏„Éß„É≥„ÇíÊõ¥Êñ∞
echo "üê≥ Dockerfile „ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇíÂêë‰∏ä‰∏≠..."
sed -i 's/FROM node:18.20.8-alpine3.20/FROM node:20-alpine3.20/' frontend/Dockerfile

# 11. VS CodeË®≠ÂÆö„ÇíËøΩÂä†„Åó„Å¶TailwindË≠¶Âëä„ÇíÁÑ°ÂäπÂåñ
mkdir -p .vscode
cat > .vscode/settings.json << 'EOF'
{
  "css.validate": false,
  "scss.validate": false,
  "less.validate": false,
  "typescript.preferences.includePackageJsonAutoImports": "auto",
  "tailwindCSS.includeLanguages": {
    "typescript": "typescript",
    "typescriptreact": "typescriptreact"
  },
  "css.customData": [".vscode/css_custom_data.json"]
}
EOF

# 12. CSS „Ç´„Çπ„Çø„É†„Éá„Éº„Çø„ÅßTailwindË≠¶Âëä„ÇíÁÑ°ÂäπÂåñ
cat > .vscode/css_custom_data.json << 'EOF'
{
  "version": 1.1,
  "atDirectives": [
    {
      "name": "@tailwind",
      "description": "Use the @tailwind directive to insert Tailwind's base, components, utilities and screens styles into your CSS."
    }
  ]
}
EOF

echo "‚úÖ VS CodeË®≠ÂÆö„ÇíËøΩÂä†„Åó„Åæ„Åó„Åü"

# 13. package.json „ÅÆ‰æùÂ≠òÈñ¢‰øÇ„ÇíÁ¢∫Ë™ç„ÉªÊõ¥Êñ∞
echo "üì¶ ‰æùÂ≠òÈñ¢‰øÇ„ÇíÁ¢∫Ë™ç‰∏≠..."
cd frontend
if command -v npm &> /dev/null; then
    npm audit fix --force
    echo "‚úÖ ‰æùÂ≠òÈñ¢‰øÇ„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£ÂïèÈ°å„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü"
fi
cd ..

# 14. AdminDashboard.tsx „ÅÆPython„Ç≥„Éº„ÉâÊ∑∑ÂÖ•„Çí‰øÆÊ≠£
echo "üîß AdminDashboard.tsx „ÅÆPython„Ç≥„Éº„ÉâÊ∑∑ÂÖ•„Çí‰øÆÊ≠£‰∏≠..."
if [ -f "frontend/src/pages/AdminDashboard.tsx" ]; then
    # 423Ë°åÁõÆ‰ª•Èôç„ÅÆPython„Ç≥„Éº„Éâ„ÇíÂâäÈô§ÔºàTypeScript„Éï„Ç°„Ç§„É´„Å´Ê∑∑ÂÖ•Ôºâ
    sed -i '423,$d' frontend/src/pages/AdminDashboard.tsx
    
    # Ê≠£„Åó„ÅÑReact„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„ÅÆÁµÇ‰∫ÜÈÉ®ÂàÜ„ÇíËøΩÂä†
    cat >> frontend/src/pages/AdminDashboard.tsx << 'EOF'

  // „É¨„Çπ„Éù„É≥„ÇπÊôÇÈñì„ÅÆËâ≤ÂàÜ„Åë
  const getResponseTimeColor = (time: number) => {
    if (time < 1000) return 'text-green-600'
    if (time < 2000) return 'text-yellow-600'
    return 'text-red-600'
  }

  if (statsLoading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <LoadingSpinner />
      </div>
    )
  }

  return (
    <div className="min-h-screen bg-gray-50 p-6">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl font-bold text-gray-900 mb-4">
            „Ç∑„Çπ„ÉÜ„É†„ÉÄ„ÉÉ„Ç∑„É•„Éú„Éº„Éâ
          </h1>
          
          {/* ÊôÇÈñìÁØÑÂõ≤ÈÅ∏Êäû */}
          <div className="flex space-x-4 mb-6">
            {(['24h', '7d', '30d'] as const).map((range) => (
              <button
                key={range}
                onClick={() => setTimeRange(range)}
                className={`px-4 py-2 rounded-lg font-medium ${
                  timeRange === range
                    ? 'bg-blue-600 text-white'
                    : 'bg-white text-gray-700 hover:bg-gray-50'
                }`}
              >
                {range === '24h' ? '24ÊôÇÈñì' : range === '7d' ? '7Êó•' : '30Êó•'}
              </button>
            ))}
          </div>
        </div>

        {/* Áµ±Ë®à„Ç´„Éº„Éâ */}
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Search className="h-8 w-8 text-blue-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Á∑èÊ§úÁ¥¢Êï∞</p>
                <p className="text-2xl font-bold text-gray-900">
                  {dashboardStats?.totalSearches?.toLocaleString() || 0}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Users className="h-8 w-8 text-green-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">„É¶„Éº„Ç∂„ÉºÊï∞</p>
                <p className="text-2xl font-bold text-gray-900">
                  {dashboardStats?.totalUsers?.toLocaleString() || 0}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Database className="h-8 w-8 text-purple-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Á†îÁ©∂ÂÆ§Êï∞</p>
                <p className="text-2xl font-bold text-gray-900">
                  {dashboardStats?.totalLabs?.toLocaleString() || 0}
                </p>
              </div>
            </div>
          </div>

          <div className="bg-white rounded-lg shadow p-6">
            <div className="flex items-center">
              <Clock className="h-8 w-8 text-orange-600" />
              <div className="ml-4">
                <p className="text-sm font-medium text-gray-600">Âπ≥ÂùáÂøúÁ≠îÊôÇÈñì</p>
                <p className={`text-2xl font-bold ${getResponseTimeColor(dashboardStats?.avgResponseTime || 0)}`}>
                  {dashboardStats?.avgResponseTime?.toFixed(0) || 0}ms
                </p>
              </div>
            </div>
          </div>
        </div>

        {/* „ÉÅ„É£„Éº„Éà */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
          {/* Ê§úÁ¥¢„Éà„É¨„É≥„Éâ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">Ê§úÁ¥¢„Éà„É¨„É≥„Éâ</h2>
            {!trendsLoading && searchTrends && (
              <ResponsiveContainer width="100%" height={300}>
                <LineChart data={searchTrends}>
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis dataKey="date" />
                  <YAxis />
                  <Tooltip />
                  <Legend />
                  <Line type="monotone" dataKey="searches" stroke="#3B82F6" name="Ê§úÁ¥¢Êï∞" />
                </LineChart>
              </ResponsiveContainer>
            )}
          </div>

          {/* „Ç∑„Çπ„ÉÜ„É†„Éò„É´„Çπ */}
          <div className="bg-white rounded-lg shadow p-6">
            <h2 className="text-xl font-semibold text-gray-900 mb-4">„Ç∑„Çπ„ÉÜ„É†„Éò„É´„Çπ</h2>
            <div className="flex items-center justify-center h-64">
              <div className={`text-center ${
                dashboardStats?.systemHealth === 'healthy' ? 'text-green-600' : 
                dashboardStats?.systemHealth === 'warning' ? 'text-yellow-600' : 'text-red-600'
              }`}>
                <Activity className="h-16 w-16 mx-auto mb-4" />
                <p className="text-2xl font-bold">
                  {dashboardStats?.systemHealth === 'healthy' ? 'Ê≠£Â∏∏' :
                   dashboardStats?.systemHealth === 'warning' ? 'Ê≥®ÊÑè' : 'Ë≠¶Âëä'}
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default AdminDashboard
EOF
    echo "‚úÖ AdminDashboard.tsx „ÅÆPython„Ç≥„Éº„ÉâÊ∑∑ÂÖ•„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü"
fi

# 15. tsconfig.json „ÅÆË®≠ÂÆö„Ç®„É©„Éº„Çí‰øÆÊ≠£
echo "üîß tsconfig.json „ÅÆË®≠ÂÆö„Ç®„É©„Éº„Çí‰øÆÊ≠£‰∏≠..."
if [ -f "frontend/tsconfig.json" ]; then
    # moduleResolution „Çí node „Å´Â§âÊõ¥
    sed -i 's/"moduleResolution": "bundler"/"moduleResolution": "node"/g' frontend/tsconfig.json
    
    # allowImportingTsExtensions „ÇíÂâäÈô§Ôºà‰∏çË¶Å„Å™Ë®≠ÂÆöÔºâ
    sed -i '/allowImportingTsExtensions/d' frontend/tsconfig.json
    
    echo "‚úÖ tsconfig.json „ÅÆË®≠ÂÆö„Ç®„É©„Éº„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü"
fi

echo "üéâ „Åô„Åπ„Å¶„ÅÆ„Ç®„É©„Éº‰øÆÊ≠£„ÅåÂÆå‰∫Ü„Åó„Åæ„Åó„ÅüÔºÅ"
echo ""
echo "üìã ‰øÆÊ≠£ÂÜÖÂÆπ:"
echo "  ‚úÖ LabCard.tsx „Ç≥„É≥„Éù„Éº„Éç„É≥„Éà„Çí‰ΩúÊàê"
echo "  ‚úÖ LabDetail.tsx „ÅÆ getSimilarLabs ÂºïÊï∞„Ç®„É©„Éº„Çí‰øÆÊ≠£"
echo "  ‚úÖ import.meta.env „Ç®„É©„Éº„Çí‰øÆÊ≠£"
echo "  ‚úÖ TypeScriptÂûãÂÆöÁæ©„ÇíËøΩÂä†"
echo "  ‚úÖ database.py „ÅÆÂûã„Ç®„É©„Éº„Çí‰øÆÊ≠£"
echo "  ‚úÖ Êú™‰ΩøÁî®„Ç§„É≥„Éù„Éº„Éà„Å®Â§âÊï∞„ÇíÂâäÈô§"
echo "  ‚úÖ Dockerfile„ÅÆ„Çª„Ç≠„É•„É™„ÉÜ„Ç£„ÇíÂêë‰∏ä"
echo "  ‚úÖ VS CodeË®≠ÂÆö„ÇíÊúÄÈÅ©Âåñ"
echo "  ‚úÖ Tailwind CSSË≠¶Âëä„ÇíËß£Ê±∫"
echo "  ‚úÖ AdminDashboard.tsx „ÅÆPython„Ç≥„Éº„ÉâÊ∑∑ÂÖ•„Çí‰øÆÊ≠£"
echo "  ‚úÖ tsconfig.json „ÅÆË®≠ÂÆö„Ç®„É©„Éº„Çí‰øÆÊ≠£"
echo ""
echo "üöÄ VS Code„ÇíÂÜçËµ∑Âãï„Åó„Å¶Â§âÊõ¥„ÇíÂèçÊò†„Åó„Å¶„Åè„Å†„Åï„ÅÑ"